import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as n,o as t}from"./app-CuVYaQ_K.js";const l={};function e(h,i){return t(),a("div",null,i[0]||(i[0]=[n(`<br><p><img src="http://cdn.leemuzi.com/weblog/jiyu.png" style="zoom:10%;">作者寄语：</p><p>线性表是数据结构中最基本、最简单、也是最常用的一种数据结构。顺序表、链表、栈、队列都是基于线性表的数据结构，包括串，也是一种特殊的线性表。</p><h2 id="线性表" tabindex="-1"><a class="header-anchor" href="#线性表"><span>线性表</span></a></h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p><strong>线性表(List)</strong> 就是包含零个或多个元素的<strong>有限</strong>序列，中元素是有顺序的，若元素存在多个，则第一个元素无前驱，最后一个元素无后继，其他每个元素都有且只有一个直接前驱和直接后继，线性表中的个数n(n≥0)定义为线性表的长度，当n=0时，称线性表为空表。</p><h3 id="抽象数据类型" tabindex="-1"><a class="header-anchor" href="#抽象数据类型"><span>抽象数据类型</span></a></h3><p>线性表的抽象数据类型定义了线性表逻辑特性和操作，并不设计具体的实现细节。对于不同的应用，线性表的基本操作是不相同的，并不完全按照抽象数据类型来定义。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ADT</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> List {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    数据对象：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        D </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> { a_i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a_i ∈ ElemType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n ≥ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    数据关系：</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        R </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> { </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">a_i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a_{i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> |</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a_i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> a_{i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} ∈ D</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> n</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    基本操作：</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        InitList</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">L)：初始化线性表。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        DestroyList</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">L)：销毁线性表。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        ListEmpty</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(L)：判断线性表是否为空。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        ListLength</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(L)：返回线性表的长度。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        GetElem</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">e)：获取第 i 个元素。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        LocateElem</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> e)：查找元素 e 的位置。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        ListInsert</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> e)：在第 i 个位置插入元素 e。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        ListDelete</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">e)：删除第 i 个元素。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        TraverseList</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(L)：遍历线性表。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        ClearList</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">L)：清空线性表。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        PriorElem</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> cur_e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">pre_e)：获取 cur_e 的前驱。</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        NextElem</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(L</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> cur_e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">next_e)：获取 cur_e 的后继。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="顺序存储结构" tabindex="-1"><a class="header-anchor" href="#顺序存储结构"><span>顺序存储结构</span></a></h3><p>顺序存储结构是线性表中的两种物理结构中的一种。指的是一段地址连续的存储单元，依次存储线性表的数据元素。也就是说核心特点是<strong>逻辑上相邻的元素在物理上也相邻</strong>。</p><figure><img src="http://cdn.leemuzi.com/weblog/image-20250312232240012.png" alt="顺序存储示意图" tabindex="0" loading="lazy"><figcaption>顺序存储示意图</figcaption></figure><p>很多语言中其实是通过一维数组来实现顺序存储的，数组和顺序表在概念上具有一定的相似性，但是两者并不完全相同。数组是一种数据结构，而顺序表是线性表的一种实现方式。</p><p>还可以从另一方面分辨两者。数组的长度在创建完成后一般是不变的。而线性表的长度指的是表中数据元素的<strong>个数</strong>。</p><figure><img src="http://cdn.leemuzi.com/weblog/image-20250313223736162.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>优点：</p><ul><li>不需要为表示表中元素的逻辑关系而增加额外的存储空间。</li><li>可以快速的存取表中的任一元素。</li></ul><p>缺点</p><ul><li>插入和删除操作需要移动大量元素。插入和删除的事件复杂度为O(n)，而读取仅需O(1)。</li><li>当线性表变化较大是，难以确定存储空间的容量。</li><li>造成存储空间的碎片。</li></ul><h3 id="链式存储结构" tabindex="-1"><a class="header-anchor" href="#链式存储结构"><span>链式存储结构</span></a></h3><p>链式存储结构不要求逻辑上相邻的元素在物理位置上也相邻因此它没有顺序存储结构的缺点，同时也失去了顺序表可随机存取的优点。<img align="right" src="http://cdn.leemuzi.com/weblog/image-20250313232607875.png" style="zoom:60%;"></p><p>链式存储结构的特点是用一组<strong>任意的</strong>存储单元存储线性表的数据元素，这组存储单元可以是连续的，也可以是不连续的。也就是说链表可以见缝插针式的存储。</p><p>因此为了表示每个数据元素a<sub>i</sub>与其直接后继元素a<sub>i+1</sub>的逻辑关系，a<sub>i</sub>不仅存储自己的信息，还需要额外的空间存储一个指示其直接后继的信息（即直接后继的存储位置）。</p><p>存储自己信息的位置称为<strong>数据域</strong>，存储直接后继位置的位置称为<strong>指针域</strong>。指针域中的信息称为<strong>指针</strong>或<strong>链</strong>。数据与和指针域组成数据元素a<sub>i</sub>的存储映像，称为结点。</p><div align="center"><img src="http://cdn.leemuzi.com/weblog/image-20250314211724926.png" alt="image-20250314211724926" style="zoom:80%;"></div><p>n个结点链接成一个链表就是线性表的链式存储结构。链表中的每个结点只包含一个指针域，也可称为<strong>单链表</strong>或<strong>线性链表</strong>。整个链表的存取都必须要从<strong>头指针</strong>开始进行。头指针指示链表中第一个结点的存储位置。同时，由于最后一个数据元素没有直接后继，线性表中的最后一个结点的指针为NULL</p><p>有时，为了方便对链表进行操作，会在单链表的第一个结点之前附设一个<strong>头结点</strong>，头结点的数据域可以不存储任何信息，也可以存储如线性表长度等类的附加信息。头结点的指针域存储指向第一个结点的指针。若线性表为空表，头结点的指针域指向NULL。</p><figure><img src="http://cdn.leemuzi.com/weblog/image-20250314234259929.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,28)]))}const r=s(l,[["render",e],["__file","linear-list.html.vue"]]),g=JSON.parse('{"path":"/notes/structure/linear-list.html","title":"线性表","lang":"zh-CN","frontmatter":{"title":"线性表","order":2,"author":"李木子","category":["数据结构"],"description":"作者寄语： 线性表是数据结构中最基本、最简单、也是最常用的一种数据结构。顺序表、链表、栈、队列都是基于线性表的数据结构，包括串，也是一种特殊的线性表。 线性表 定义 线性表(List) 就是包含零个或多个元素的有限序列，中元素是有顺序的，若元素存在多个，则第一个元素无前驱，最后一个元素无后继，其他每个元素都有且只有一个直接前驱和直接后继，线性表中的个数...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/notes/structure/linear-list.html"}],["meta",{"property":"og:site_name","content":"李木子"}],["meta",{"property":"og:title","content":"线性表"}],["meta",{"property":"og:description","content":"作者寄语： 线性表是数据结构中最基本、最简单、也是最常用的一种数据结构。顺序表、链表、栈、队列都是基于线性表的数据结构，包括串，也是一种特殊的线性表。 线性表 定义 线性表(List) 就是包含零个或多个元素的有限序列，中元素是有顺序的，若元素存在多个，则第一个元素无前驱，最后一个元素无后继，其他每个元素都有且只有一个直接前驱和直接后继，线性表中的个数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://cdn.leemuzi.com/weblog/image-20250312232240012.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-14T16:08:47.000Z"}],["meta",{"property":"article:author","content":"李木子"}],["meta",{"property":"article:modified_time","content":"2025-03-14T16:08:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线性表\\",\\"image\\":[\\"http://cdn.leemuzi.com/weblog/image-20250312232240012.png\\",\\"http://cdn.leemuzi.com/weblog/image-20250313223736162.png\\",\\"http://cdn.leemuzi.com/weblog/image-20250314234259929.png\\"],\\"dateModified\\":\\"2025-03-14T16:08:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李木子\\"}]}"]]},"headers":[{"level":2,"title":"线性表","slug":"线性表","link":"#线性表","children":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"抽象数据类型","slug":"抽象数据类型","link":"#抽象数据类型","children":[]},{"level":3,"title":"顺序存储结构","slug":"顺序存储结构","link":"#顺序存储结构","children":[]},{"level":3,"title":"链式存储结构","slug":"链式存储结构","link":"#链式存储结构","children":[]}]}],"git":{"createdTime":1740063494000,"updatedTime":1741968527000,"contributors":[{"name":"lee","username":"lee","email":"li15237845367@163.com","commits":3,"url":"https://github.com/lee"}]},"readingTime":{"minutes":4.71,"words":1414},"filePathRelative":"notes/structure/linear-list.md","localizedDate":"2025年2月20日","excerpt":"<br>\\n<p><img src=\\"http://cdn.leemuzi.com/weblog/jiyu.png\\" style=\\"zoom:10%;\\">作者寄语：</p>\\n<p>线性表是数据结构中最基本、最简单、也是最常用的一种数据结构。顺序表、链表、栈、队列都是基于线性表的数据结构，包括串，也是一种特殊的线性表。</p>\\n<h2>线性表</h2>\\n<h3>定义</h3>\\n<p><strong>线性表(List)</strong> 就是包含零个或多个元素的<strong>有限</strong>序列，中元素是有顺序的，若元素存在多个，则第一个元素无前驱，最后一个元素无后继，其他每个元素都有且只有一个直接前驱和直接后继，线性表中的个数n(n≥0)定义为线性表的长度，当n=0时，称线性表为空表。</p>","autoDesc":true}');export{r as comp,g as data};
