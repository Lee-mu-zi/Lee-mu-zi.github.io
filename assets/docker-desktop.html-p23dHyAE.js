import{_ as o}from"./jiyu-BeUsfy-A.js";import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as i,o as c}from"./app-v3rfOggS.js";const r="/assets/tools/docker-desktop/Snipaste_2025-02-24_22-42-31.png",l="/assets/tools/docker-desktop/Snipaste_2025-03-01_21-36-11.png",a="/assets/tools/docker-desktop/Snipaste_2025-03-01_21-59-12.png",d="/assets/tools/docker-desktop/Snipaste_2025-03-01_22-00-49.png",n="/assets/tools/docker-desktop/Snipaste_2025-03-01_22-05-06.png",p={};function k(h,e){return c(),t("div",null,e[0]||(e[0]=[i('<br><p><img src="'+o+'" style="zoom:10%;">作者寄语：</p><p>在这个章节主要是对Docker进行安装和一些常见的操作命令的总结，在日常的开发中，一般使用的是Linux系统作为环境，所以我将会通过VMware安装Ubuntu系统作为一个基础环境来安装Docker。当然也可以使用Windows安装Docker Desktop，它是一个可视化界面的Docker，会更清楚的展现出一些镜像和容器信息，安装方式也十分简单。关于Ubuntu如何安装网上也有很多教程<a href="https://yeasy.gitbook.io/docker_practice/install/ubuntu">（Ubuntu安装Docker）</a></p><h2 id="docker命令" tabindex="-1"><a class="header-anchor" href="#docker命令"><span>Docker命令</span></a></h2><p>了解过Docker历史的应该都知道，Docker最开始是没有可视化界面段的，主要是依赖于命令行工具（CLI）进行管理的<code>docker --help</code>命令可以查看Docker所有命令。如下图所示：<br><img src="'+r+'" style="zoom:80%;" title="部分命令展示"></p><h2 id="docker镜像相关命令" tabindex="-1"><a class="header-anchor" href="#docker镜像相关命令"><span>Docker镜像相关命令</span></a></h2><p><code>docker search [OPTIONS] TERM</code>：用于在Docker Hub中搜索Docker镜像。</p><ul><li><code>TERM</code>关键字或者镜像名称</li><li><code>OPTIONS</code>可选参数，用于定制搜索行为，可通过<code>docker search --help</code>查看参数详细信息</li></ul><p><code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</code>：用于从镜像仓库中拉取镜像到本地。</p><ul><li><code>NAME</code>：镜像的名称，如：nginx、mysql。</li><li><code>TAG</code>：镜像的标签，如：latest或1.23.1，默认拉取的是镜像仓库中的latest。</li><li><code>DIGEST</code>：镜像的摘要（唯一标识符），用于拉取特定版本的镜像。</li></ul><p><code>docker images [OPTIONS] [REPOSITORY[:TAG]]</code>和<code>docker image ls [OPTIONS] [REPOSITORY[:TAG]]</code>两者都是列出本地Docker镜像的命令，它们的功能完全相同，根据习惯自行选择。</p><ul><li><code>REPOSITORY</code>：指定镜像的仓库名称</li><li><code>TAG</code>：指定镜像的标签</li></ul><p><code>docker rmi [OPTIONS] IMAGE [IMAGE...]</code>和<code>docker image rm [OPTIONS] IMAGE [IMAGE...]</code>这两个命令都是删除本地镜像</p><ul><li><code>IMAGE</code>：要删除的镜像，可以通过镜像 ID、仓库名称（REPOSITORY）或标签（TAG）指定。</li></ul><h2 id="docker容器相关命令" tabindex="-1"><a class="header-anchor" href="#docker容器相关命令"><span>Docker容器相关命令</span></a></h2><p><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code>用于从镜像创建并启动一个新的容器，它结合了<code>docker create</code>和<code>docker start</code>的功能</p><ul><li><code>IMAGE</code>：要运行的镜像名称或 ID。</li><li><code>COMMAND</code>：容器启动后执行的命令</li><li><code>ARG</code>：传递给命令的参数</li></ul><p><code>docker ps [OPTIONS]</code>是Docker CLI中用于列出正在运行的容器的命令。它可以帮助查看当前运行的容器状态、端口映射、容器名称等信息。如果需要查看所有容器（包括已停止的容器），可以使用<code>docker ps -a</code>。</p><p><code>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</code>用于在正在运行的容器中执行命令，允许你在不进入容器的情况下，直接在容器内运行命令。这对于调试、管理容器或执行一次性任务非常有用。<code>docker exec -it</code>命令可以分配一个伪终端，类似于Linux，可以完善配置。</p><ul><li><code>CONTAINER</code>：目标容器的名称或 ID。</li><li><code>COMMAND</code>：要在容器内执行的命令。</li><li><code>ARG</code>：传递给命令的参数。</li></ul><p><code>docker stop [OPTIONS] CONTAINER [CONTAINER...]</code>和<code>docker kill [OPTIONS] CONTAINER [CONTAINER...]</code>都可用于停止容器。</p><ul><li><code>CONTAINER</code>：目标容器的名称或 ID。</li></ul><p><code>docker restart [OPTIONS] CONTAINER [CONTAINER...]</code>它会停止容器并重新启动</p><ul><li><code>CONTAINER</code>：目标容器的名称或 ID。</li></ul><p><code>docker rm [OPTIONS] CONTAINER [CONTAINER...]</code>用于删除一个或多个已停止的容器。</p><ul><li><code>CONTAINER</code>：目标容器的名称或 ID。</li></ul><h2 id="docker安装mysql" tabindex="-1"><a class="header-anchor" href="#docker安装mysql"><span>Docker安装MySQL</span></a></h2><h3 id="拉取镜像docker-pull-mysql-latest" tabindex="-1"><a class="header-anchor" href="#拉取镜像docker-pull-mysql-latest"><span>拉取镜像<code>docker pull mysql:latest</code></span></a></h3><img src="'+l+'" style="zoom:100%;"> ### 运行MySQL容器 使用以下命令能够启动一个MySQL容器 ```bash docker run -d \\ --name mysql_container \\ -e MYSQL_ROOT_PASSWORD=your_password \\ -p 3306:3306 \\ mysql ``` 参数说明 - `-d`：以后台模式运行容器。 <ul><li><p><code>--name mysql_container</code>：为容器指定一个名称（例如 mysql_container）。</p></li><li><p><code>-e MYSQL_ROOT_PASSWORD=your_password</code>：设置 MySQL 的 root 用户密码（将 your_password 替换为你的密码）。</p></li><li><p><code>-p 3306:3306</code>：将容器的 3306 端口映射到主机的 3306 端口。</p></li><li><p><code>mysql</code>：使用的镜像名称。<br> 运行结果<br><img src="'+a+'" style="zoom:100%;"><br> 运行完成后可以通过<code>docker ps -a</code>或<code>docker container ls -a</code>查询所有容器<br><img src="'+d+'" style="zoom:100%;"></p></li></ul><h3 id="连接mysql" tabindex="-1"><a class="header-anchor" href="#连接mysql"><span>连接MySQL</span></a></h3><p>容器创建成功之后就可以使用数据库工具连接，需要注意的是主机应该输入的应该是虚拟机的。<br><img src="'+n+`" style="zoom:100%;"></p><h3 id="管理mysql的配置文件" tabindex="-1"><a class="header-anchor" href="#管理mysql的配置文件"><span>管理MySQL的配置文件</span></a></h3><p>如果你需要自定义 MySQL 的配置文件（如 my.cnf），可以将配置文件挂载到容器中。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> run</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  --name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mysql_container</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> MYSQL_ROOT_PASSWORD=your_password</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 3306:3306</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /path/to/my.cnf:/etc/mysql/my.cnf</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  mysql</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36)]))}const g=s(p,[["render",k],["__file","docker-desktop.html.vue"]]),D=JSON.parse('{"path":"/tools/docker/docker-desktop.html","title":"Docker实战","lang":"zh-CN","frontmatter":{"title":"Docker实战","cover":"/assets/tools/Docker.svg","order":2,"author":"李木子","category":["Docker"],"sticky":true,"description":"作者寄语： 在这个章节主要是对Docker进行安装和一些常见的操作命令的总结，在日常的开发中，一般使用的是Linux系统作为环境，所以我将会通过VMware安装Ubuntu系统作为一个基础环境来安装Docker。当然也可以使用Windows安装Docker Desktop，它是一个可视化界面的Docker，会更清楚的展现出一些镜像和容器信息，安装方式也...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/tools/docker/docker-desktop.html"}],["meta",{"property":"og:site_name","content":"李木子"}],["meta",{"property":"og:title","content":"Docker实战"}],["meta",{"property":"og:description","content":"作者寄语： 在这个章节主要是对Docker进行安装和一些常见的操作命令的总结，在日常的开发中，一般使用的是Linux系统作为环境，所以我将会通过VMware安装Ubuntu系统作为一个基础环境来安装Docker。当然也可以使用Windows安装Docker Desktop，它是一个可视化界面的Docker，会更清楚的展现出一些镜像和容器信息，安装方式也..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/assets/tools/Docker.svg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-02T14:55:31.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://mister-hope.github.io/assets/tools/Docker.svg"}],["meta",{"name":"twitter:image:alt","content":"Docker实战"}],["meta",{"property":"article:author","content":"李木子"}],["meta",{"property":"article:modified_time","content":"2025-03-02T14:55:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker实战\\",\\"image\\":[\\"https://mister-hope.github.io/assets/tools/Docker.svg\\"],\\"dateModified\\":\\"2025-03-02T14:55:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"李木子\\"}]}"]]},"headers":[{"level":2,"title":"Docker命令","slug":"docker命令","link":"#docker命令","children":[]},{"level":2,"title":"Docker镜像相关命令","slug":"docker镜像相关命令","link":"#docker镜像相关命令","children":[]},{"level":2,"title":"Docker容器相关命令","slug":"docker容器相关命令","link":"#docker容器相关命令","children":[]},{"level":2,"title":"Docker安装MySQL","slug":"docker安装mysql","link":"#docker安装mysql","children":[{"level":3,"title":"拉取镜像docker pull mysql:latest","slug":"拉取镜像docker-pull-mysql-latest","link":"#拉取镜像docker-pull-mysql-latest","children":[]},{"level":3,"title":"连接MySQL","slug":"连接mysql","link":"#连接mysql","children":[]},{"level":3,"title":"管理MySQL的配置文件","slug":"管理mysql的配置文件","link":"#管理mysql的配置文件","children":[]}]}],"git":{"createdTime":1740063494000,"updatedTime":1740927331000,"contributors":[{"name":"lee","username":"lee","email":"li15237845367@163.com","commits":6,"url":"https://github.com/lee"}]},"readingTime":{"minutes":4.22,"words":1267},"filePathRelative":"tools/docker/docker-desktop.md","localizedDate":"2025年2月20日","excerpt":"<br>\\n<p><img src=\\"/assets/jiyu.png\\" style=\\"zoom:10%;\\">作者寄语：</p>\\n<p>在这个章节主要是对Docker进行安装和一些常见的操作命令的总结，在日常的开发中，一般使用的是Linux系统作为环境，所以我将会通过VMware安装Ubuntu系统作为一个基础环境来安装Docker。当然也可以使用Windows安装Docker Desktop，它是一个可视化界面的Docker，会更清楚的展现出一些镜像和容器信息，安装方式也十分简单。关于Ubuntu如何安装网上也有很多教程<a href=\\"https://yeasy.gitbook.io/docker_practice/install/ubuntu\\">（Ubuntu安装Docker）</a></p>","autoDesc":true}');export{g as comp,D as data};
